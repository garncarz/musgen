\documentclass[a4paper, 11pt, titlepage]{report}

\newif \iffrench  % French?
% \frenchtrue  % oui
\newif \ifdiploma  % diploma thesis arrangement?
\diplomatrue  % yes
\newif \ifprint  % document for print?
% \printtrue  % yes

\usepackage[utf8]{inputenc}
\usepackage[center]{caption}
\usepackage{subfig}
\usepackage{listings}
\usepackage{graphicx}

\iffrench
\usepackage[T1]{fontenc}
\usepackage{calligra}
\renewcommand{\rmdefault}{calligra}
\renewcommand{\sfdefault}{calligra}
\renewcommand{\ttdefault}{calligra}
\def \Ondrej {Ondrej }
\def \the {le }
\def \The {Le }

\else
\def \Ondrej {Ondřej }
\def \the {the }
\def \The {The }
\fi

\usepackage[top=3.3cm, left=2.5cm]{geometry}
\textwidth 16cm
\textheight 23cm
\renewcommand{\baselinestretch}{1.2}

\usepackage[
  unicode,
  colorlinks,
  bookmarks,
  bookmarksnumbered,
  pagebackref
]{hyperref}

\hypersetup{
  pdftitle={MusGen},
  pdfauthor={Ondřej Garncarz},
  pdfsubject={Generating music compositions by a computer},
  pdfkeywords={}
}

\ifprint \hypersetup{colorlinks=false} \fi


\begin{document}


\ifdiploma

\begin{titlepage}
\centering
\begin{huge}
\begin{bfseries}
VŠB --- Technická univerzita Ostrava\\
Fakulta elektrotechniky a~informatiky\\
Katedra informatiky\\
\vfill
Generování hudebních skladeb počítačem\\
Generating Music Compositions by a~Computer\\
\vfill
\end{bfseries}
\end{huge}
2011
\hfill
\Ondrej Garncarz
\end{titlepage}

\chapter*{Declaration}
I declare this thesis was written solely by myself. All used sources and publications are listed.
\vskip 5cm
\noindent Date: \today
\hskip 0.4\linewidth
\Ondrej Garncarz

\chapter*{Abstract and keywords}
\section*{Abstract}
\The thesis is focused on a problem of generating music by a computer, music being random but not very different from one created by a human, following particular harmony rules and not overgoing into disharmony. Basic terms from music theory are introduced, then \the developed algorithm is described, both generally and in a relation to \the Haskell implementation. \The program is compared to similar software and a possible future development is suggested.
\section*{Abstrakt}
Práce se zabývá problémem generování hudby počítačem, která je náhodná, ale zároveň ne příliš odlišná od hudby složené člověkem, dodržující určitá pravidla harmonie a nevykračující do disharmonie. Jsou objasněny některé základní pojmy hudební teorie a následně je popsán vyvinutý algoritmus, jednak obecně a poté i v souvislosti k implementaci v jazyku Haskell. Program je srovnán s jemu podobnými, již existujícími, a je navržen jeho další možný vývoj.
\section*{Keywords}
music, composition, music generated by a computer, randomness, harmony, MIDI
\section*{Klíčová slova}
hudba, skladba, hudba generovaná počítačem, náhoda, harmonie, MIDI

\else
\title{Generating music compositions by a computer}
\author{\Ondrej Garncarz}
\date{\today}
\maketitle
\fi


\tableofcontents

\listoffigures

\chapter{Preamble}

\The creation of music is a wonderful process known to humankind for a very long time, interesting not only because of output. During history, people have become able to write music down and analyze it. Sheet music turns out to be made just of few primitives satisfying rules of music which are easy to be interpreted mathematically. Also, it can be transferred back to music by letting musicians interpret it or, in the last few decades, by letting even computers do it which is very easy to achieve.

\The goal of this thesis is to algorithmically analyze one of possible processes of \the creation of music and to show it implemented. Thus, we start with Chapter~\ref{theory} introducing basic definitions from music theory, using them in Chapter~\ref{algorithm} to establish an algorithm, whose implementation is described in Chapter~\ref{implementation} and subsequently compared with similar programs in Chapter~\ref{comparison}.

Have a good read.


\chapter{Introduction to music theory}
\label{theory}

This chapter is willing to introduce some basic terms which will be useful later in \the process of creation. Understanding of relations is connected with insight into algorithms and names are \the ones this thesis will reuse. Presented terms and relations are --- in a very more complex way --- taught by \the book \cite{kofron} which is also a great inspiration and source for this thesis.

\section{Song}

Although a little simplifying, let's call a musical work a song.

\section{Tone}

Tones are musical sounds of which \the song is composed. They can be produced in many ways --- singed, played on a instrument or created synthetically. They don't even have to be produced, they can exist in an abstract form as sheet music notes. They can have diverse qualities depending on their essence:

\begin{description}
\item[Pitch] is a frequency of \the sound.\footnote{Precisely said: \the fundamental frequency.}
\item[Duration] is a time of how long \the sound is lasting.
\item[Dynamics] is a strength of \the expression, simplified a loudness.
\item[Color (timbre)] is an expression itself. Because \the tone isn't just a sound wave of \the fundamental frequency but a mixture of sound waves rooted from \the loudest --- fundamental --- one, \the expression varies on ratios of their strengths. This is what makes different instruments sound differently.
\end{description}

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{c' cis' es' e'}
\caption{Example of tones of different pitches, in ascending order}
\end{figure}

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{f'4 f'2}
\caption{Example of tones of different durations}
\end{figure}

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{b'\mp b'\f}
\caption{Example of tones of different dynamics}
\end{figure}

It's important to remark that \the qualities can be approached as relative or absolute --- for \the musical use \the relative approach is much more important --- we want to know how tones are related to each other, we don't pay too much attention to a physical point of view.

In this thesis, the essential qualities are pitch and duration.

\The distance between two tones --- their pitches --- is called an interval. \The distance of 12 semitones\footnote{A semitone is \the smallest distance from \the classical point of view.} is an important one --- an octave --- defining a pitch twice as high (or low). For \the simplicity in a lot of practices, distances bigger than \the octave can be recalculated as \the value modulo 12 and those under zero --- an unison --- can be added by 12 resulting in all intervals being from \the unison to \the octave.


\section{Melody}

A melody is a sequence of tones.

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{d''4 e''8 f'' b'4.}
\caption{Example of a melody}
\end{figure}


\section{Chord}

A chord is a set of tones sounding at a moment. \The fundamental tone --- not necessarily \the lowest one --- on which \the chord is built is called a root. Sometimes a subset of a chord can be viewed as of \the same nature as \the chord.

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<c' e' g' c''> <c' g' c''>}
\caption{Example of a chord\\followed by a chord of \the same nature but with one tone suppressed}
\end{figure}

\subsection{Triad}

A triad is a commonly used chord, consisting of three tones between which these intervals can occur:

\begin{description}
\item[Major] consisting of distances of 4 and 7 semitones to \the root.
\item[Minor] consisting of distances of 3 and 7 semitones to \the root.
\item[Diminished] consisting of distances of 3 and 6 semitones to \the root.
\item[Augmented] consisting of distances of 4 and 8 semitones to \the root.
\end{description}

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<c' e' g'>1 <c' es' g'> <c' es' ges'> <c' e' gis'>}
\caption{Examples of triads: major, minor, diminished and augmented built on C}
\end{figure}


\section{Harmony}

Harmony is a relation between notes in a chord. \The chord can be viewed as an union of a root tone and other tones which have some distance from \the root tone. Moreover, a progression of harmony sets ``a feeling'' of a song whereas a melody can be viewed as ``a particular message''.

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<c' e' g'> <g' b' d'> <f' a' c'> <c' e' g'>}
\caption{Example of a progression of harmony}
\end{figure}

\subsection{Voices}

A voice can be viewed as a vertical part of a staff. Four-part harmony has these four voices:

\begin{description}
\item[Bass] is \the lowest part.
\item[Tenor] is \the second lowest part.
\item[Alto] is \the second highest part.
\item[Soprano] is \the highest part, holding a melody.
\end{description}

This thesis focuses mainly on bass and soprano.

\begin{figure}[h!]
\centering
\subfloat[Full harmony]{\lilypond[fragment, staffsize=20]{<c' e' g'> <g' b' d'> <f' a' c'> <c' e' g'>}}
\subfloat[Bass voice]{\lilypond[fragment, staffsize=20]{c' d' c' c'}}
\subfloat[Soprano voice]{\lilypond[fragment, staffsize=20]{g' b' a' g'}}
\caption{Example of voices}
\end{figure}

\subsection{Counterpoint}

Counterpoint is a harmony progress where \the bass voice and \the soprano one evolve contrary.

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<d' a'> <c' b'> <d' g'> <c' a'>}
\caption{Example of counterpoint}
\end{figure}


\section{Scale}

Songs (or their parts) are usually based on a set of tones called a scale.

\begin{figure}[h!]
\centering
\subfloat[C major]{\lilypond[fragment, staffsize=20]{c'8 d' e' f' g' a' b' c''}}
\subfloat[E major]{\lilypond[fragment, staffsize=20]{e'8 fis' gis' a' b' cis'' dis'' e''}}
\caption{Example of two scales}
\end{figure}

\The scale is based on its key tone --- that's \the one \the scale is named after --- and intervals of included tones in relation to \the key tone --- that's what \the second part of \the scale's name stands for. Scales this thesis aims at and which are also \the most frequently used in Western music are called \the major scale and \the minor scale\footnote{There are more minor scales, this thesis aims at \the natural one.}.

\begin{figure}[h!]
\centering
\subfloat[C major]{\lilypond[fragment, staffsize=20]{c'8 d' e' f' g' a' b' c''}}
\subfloat[C minor]{\lilypond[fragment, staffsize=20]{c'8 d' es' f' g' as' b' c''}}
\caption{Scales based on C but differing in intervals}
\end{figure}

\subsection{Consonance and dissonance}

A consonant chord is a chord coming from a scale and being of proper intervals, thus sounding pleasantly, while a dissonant one isn't and is tending to evolve into a consonant one to sustain \the scale. This brings richer harmony and more possibilities for melodizing.

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<c' e' g'> <g' b' d' f'> <c' e' g'>}
\caption{Scale C: consonant chord C evolves to dissonant G$^7$ and then back to C}
\end{figure}


\section{Diatonic function}

A diatonic function (or a harmonic function) defines a relation between a chord and a scale. Let's consider a C major scale as a referential scale in examples. \The main functions presented here come from \cite[p.~48]{kofron}.

\subsection{Tonic chord}

\The tonic chord commonly begins and ends a song and defines its scale. It's a chord perceived as a tranquillity. \The root tone is \the key tone of \the scale (C), other tones are \the third and \the fifth of \the scale (E and G).

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<c' e' g' c''>}
\caption{Tonic chord}
\end{figure}

\subsection{Dominant chord}

\The dominant chord is a thrilling chord which is usually resolved (followed) by \the tonic one. \The root tone is \the fifth tone of \the scale (G), other tones are \the last and \the second of \the scale (B and D).

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<g' b' d''> <e' g' c''>}
\caption{Dominant chord, resolved in a tonic one}
\end{figure}

A tone of particular interest is \the \textbf{leading tone}, \the last tone of \the scale (H) --- according to \the strict harmony theory (\cite[p.~38, 47]{kofron}) it must be unique (not being in more octaves) and resolved and \the right resolution is into \the first higher tone of \the scale --- thus \the first tone of \the scale (C).

\subsection{Subdominant chord}

\The subdominant chord is somewhere between \the tonic and \the dominant. It can be viewed as a preparation for a dominant chord with a medium amount of thrill. \The root tone is \the fourth tone of \the scale (F), other tones are \the sixth and \the first of \the scale (A and C).

\begin{figure}[h!]
\centering
\lilypond[fragment, staffsize=20]{<f' a' c''> <g' b' d''> <e' g' c''>}
\caption{Subdominant chord, followed by a dominant one resolved in a tonic one}
\end{figure}


\section{Rhythm}

Rhythm is a timing of single tones based on a more or less regular patterns. \The fundamental repeating element of rhythm is a \textbf{beat}. Beats are arranged into regular groups of few called \textbf{measures} (also bars). \The first beat of \the measure is usually stressed, called a downbeat. \textbf{Tempo} is a speed of a song, usually denoted as a count of beats per minute.

\begin{figure}[h!]
\centering
\begin[fragment, staffsize=20]{lilypond}
#(define mydrums '((tambourine default #t 0)))
\new DrumStaff {
	\override Staff.StaffSymbol #'line-positions = #'( 0 )
	\override Staff.BarLine #'bar-size = #3
	\set DrumStaff.drumStyleTable = #(alist->hash-table mydrums)
	\drummode {
		\time 2/4
		tamb tamb tamb tamb tamb tamb
	}
}
\end{lilypond}
\caption{Rhythm: three measures, inside each two beats}
\end{figure}


\chapter{One of possible processes of \the creation of music}
\label{algorithm}

Taking harmony and its progression as a basis in our process can lead us to a very straightforward approach. This chapter deals with an algorithmic concept I've designed, sections are describing details of it.

Let's see a song as an at least two dimensional playground, space of possibilities, where one dimension stands for time and the second one stands for tones. Some of games played there may be pleasant to watch, joyful or making patterns and some may be not. If we were told what moves are \the only allowed, \the game couldn't be rich in \the end, independently of \the quantity of \the allowed moves. Instead, we can list just moves we wouldn't be happy to see and let \the rest for players which brings freedom and a plenty of unexpected situations, hopefully pleasant.

In \the beginning it's reasonable to think over an expected output. We may want a finished song or a real-time music stream, possibly never-ending. \The first demand is leading to some calculations with \the desired output in a finite time, \the second one is more complex --- calculations have to be done faster than playing. For simplicity let's focus on finished songs --- even so it's not too far from a streaming idea assuming computing is fast enough.

Another concern is about output characteristics --- for instance from theory we know songs or their parts are based on scales, thus we may want a song to be in a random scale, a certain scale or to change \the scale randomly. According to \cite[p.~110]{kofron} \the last demand brings some new rules, for \the simplicity we will work with one scale songs. Songs are also of some tempo and rhythm, we will keep these constant as well.

\The constants can be set randomly but they may be considered as inputs of \the algorithm, allowing an user to demand his favorite style.

\The first thing to start a song with is a tonic chord so a listener accustoms to \the used scale. Then chords progress freely, avoiding non-allowed moves, till \the ending tonic chord again closes \the song. This is a very general concept so it limits output as little as possible.

Supplying \the process with new chords is a job of a random chords generator. It takes a general random number generator and gives a couple --- tones of a chord (which are of some count) and a duration of \the chord. \The result should be random as possible, but a little adjustment can be made to accelerate \the following procedures --- \the probability distribution of a tone can be \the normal (Gaussian) distribution, thus focusing more on tones around \the center, not going into extremes too often. Another adjustment could be made by telling \the chords generator about \the used scale, thus allowing it to give a scale chord more probably than an out of scale chord.

So we will ask for random chords until we receive a tonic chord. \The truth is we could generate \the chord in a fixed way, as a function of \the scale, but this would fix \the chord inversion --- making \the chord structure fusty. \The received tonic chord is to become \the song's beginning.

Most of following supplied chords will probably sound weird because of their fortuity. Thus we want to relate them to past chords and analyze how much a possibly succeeding chord fits with \the past. Rating can be split into two phases: rating of harmony relations and rating of rhythm relations. This split allows us to find a harmonically fitting tones at first and let \the finding of a right duration as an independent next step. \The less combinations we have to choose from, \the more fast we will find \the right value(s).

Both ratings can be of many models. \The used one is making \the final rating by composing (multiplying) elementary ratings, each of them, moreover, being of some defined importance. Sections \ref{alg-harmony} and \ref{alg-rhythm} are describing \the elementary rules--ratings.

Once having created a latent harmony of chords --- a harmonic principle of a song, ``a thought'' --- we need to convert it to few lines, each representing different instrument with its own approach, together creating \the final output. This thesis thinks of few lines inspired by real groups, principles are described in Section \ref{alg-interpretation}.

\section{Harmony rules}
\label{alg-harmony}

This section lists elementary harmony rules that can be used for rating a possible succeeding chord in a relation with past chords. Every rule is independent of others, thus \the final harmony rating must be a compound of them. Examples are based on \the C major scale. \The rules are extracted from or inspired by \cite{kofron}, a page is often specified.

\begin{itemize}

\item Is a leading tone treated \the right way? According to \cite[p.~38, 47]{kofron} we can't double \the leading tone into more octaves and \the leading tone has to be led one semitone up to \the tonic tone.
\begin{figure}[h!]
\centering
\subfloat[Bad, doubled]{\lilypond[fragment, staffsize=20]{<g' b' d'' b''>}}
\subfloat[Badly resolved]{\lilypond[fragment, staffsize=20]{<g' b' d''> <e' g' c'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<g' b' d''> <e' g' c''>}}
\caption{Treating of a leading tone rule}
\end{figure}

\clearpage
\item If this is a beginning of \the song, is it a tonic triad chord? \The tonic triad is important for introducing \the scale and all \the examples in \cite{kofron} begin with \the tonic chord.
\begin{figure}[h!]
\centering
\subfloat[Bad, not tonic triad]{\lilypond[fragment, staffsize=20]{<d' f' b'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<c' e' g'>}}
\caption{Beginning with a tonic triad rule}
\end{figure}

\item Isn't a subdominant chord succeeding a dominant chord? According to \cite[p.~44, 48]{kofron} we avoid appending a subdominant chord to a dominant one, as it would weaken harmony.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<e' g' c''> <f' a' c'>}}
\subfloat[Anything else, good]{\lilypond[fragment, staffsize=20]{<d' f' b'>}}
\caption{Subdominant not succeeding a dominant rule}
\end{figure}

\item Is it a scale chord? According to \cite[p.~48--50, 110]{kofron} scale chords are \the most important ones and fully sufficient for not long compositions.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<as' c' es'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<d' f' a'>}}
\caption{Scale chord rule}
\end{figure}

\clearpage
\item Is it a ``thick'' chord? This rule acts against too loose chords (having too big range or being too far from \the center of \the scale).
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<c' e'' c'''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<e' g' d''>}}
\caption{Thick chord rule}
\end{figure}

\item Isn't there a too much ``jumping''? According to \cite[p.~39]{kofron} it seems that melody shouldn't consist of big distances between tones, we apply this rule for all \the voices as being melodies.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<e' g' d''> <c' e'' c'''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<e' g' d''> <f' b' e''>}}
\caption{Antijumping rule}
\end{figure}

\item Is it a triad? According to \cite[p.~49--50]{kofron} it is quite efficient and sufficient for harmony to consist of triads.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<e' f' d''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<a' c'' e'>}}
\caption{Triad rule}
\end{figure}

\item Isn't it silence? (In this thesis we avoid silence.)
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{r}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<a' c'' e'>}}
\caption{Antisilence rule}
\end{figure}

\item Is \the count of chord tones right? We try to hold four voices harmony.
\begin{figure}[h!]
\centering
\subfloat[Bad, just two voices]{\lilypond[fragment, staffsize=20]{<c'' e'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<a' c'' e' c'>}}
\caption{Tones count rule}
\end{figure}

\item Is a counterpoint move applied? According to \cite[p.~42, 44]{kofron} it is efficient to use counterpoint move in bass and soprano.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<f' b'> <fis' c''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<f' b'> <e' c''>}}
\caption{Counterpoint rule}
\end{figure}

\item Is it moving? We try to avoid voices to be stuck.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<d'' f' a'> <d'' f' a'>}}
\subfloat[Bad, soprano stuck]{\lilypond[fragment, staffsize=20]{<d'' f' a'> <d'' g' b'>}}
\subfloat[Not good, bass stuck]{\lilypond[fragment, staffsize=20]{<d'' f' a'> <c'' f' b'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<d'' f' a'> <c'' g' b'>}}
\caption{Moving rule}
\end{figure}

\item Is it consonant? We allow dissonant chords to interlace consonant ones, vividing \the composition.
\begin{figure}[h!]
\centering
\subfloat[Bad, two dissonant chords inline]{\lilypond[fragment, staffsize=20]{<e' g' c''> <f' g' d''> <e' g' cis''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<e' g' c''> <f' g' d''> <e' g' c''>}}
\caption{Consonant rule}
\end{figure}

\clearpage
\item Isn't it repeating? We try to avoid repetition of recent chords for vividness.
\begin{figure}[h!]
\centering
\subfloat[Bad, \the last chord is \the same as \the first one]{\lilypond[fragment, staffsize=20]{<c' e'' g'> <f' a' c''> <c' e'' g'>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<c' e' g' c''> <f' a' c''> <d' g' b' d''>}}
\caption{Antirepeating rule}
\end{figure}

\item Isn't soprano repeating? We try to make soprano voice more vivid by not repeating recent soprano tones.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<c' e' g' c''> <f' a' c''> <d' g' b' d''>}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<c' e' g'> <f' a' c''> <d' g' b' d''>}}
\caption{Antirepeating soprano rule}
\end{figure}

\end{itemize}


\section{Rhythm rules (of harmony)}
\label{alg-rhythm}

Since rhythm is not \the main concern of this thesis, just a few simple rhythmic rules were dealt with to make songs more vivid.

\begin{itemize}

\item Isn't it overlapping \the end of a measure? According to \cite[p.~50]{kofron} it's not so efficient to end \the measure with \the same chord that begins \the following one. Avoiding overlapping also makes harmony more dense, which is quite wanted as this thesis takes harmony as \the basis.
\begin{figure}[h!]
\centering
\subfloat[Bad]{\lilypond[fragment, staffsize=20]{<d'' f' a'>1 ~<d'' f' a'>4}}
\subfloat[Good]{\lilypond[fragment, staffsize=20]{<d'' f' a'>}}
\caption{Antioverlapping rule}
\end{figure}

\item Is it ending on a beat, or least copying rhythm from \the last measure? We try to tighten \the feeling of measure beats by making chords end on beats but also a repetition of \the last irregularity is allowed not to have a still robotic rhythm.
\begin{figure}[h!]
\centering
\subfloat[Not so good]{\lilypond[fragment, staffsize=20]{\time 2/4 <g' b' d''>4.}}
\subfloat[Good, ending on a beat]{\lilypond[fragment, staffsize=20]{\time 2/4 <g' b' d''>}}
\subfloat[Good, copying rhythm]{\lilypond[fragment, staffsize=20]{\time 2/4 <c'' e' g'>4. <a' c'' e'>8 <g' b' d''>4.}}
\caption{Beat-copying rule}
\end{figure}

\end{itemize}


\section{Interpretation}
\label{alg-interpretation}

This thesis deals with these interpretation lines: a bass line, a melody line and a rhythmic line.

\The bass line is fundamentally a line made of \the lowest tones of harmony flow --- \the bass voice. But not in a strict way: \the fundamental tones have to sound on a stressed beat, otherwise we can use other tones of \the chord (called \the fingered way) or we can use tones between \the fundamental ones (called \the walking bass)\footnote{Inspired by \cite{klavir}.}.

\begin{figure}[h!]
\centering
\subfloat[Harmony flow]{\lilypond[fragment, staffsize=20]{<c' e' g'>4 <e' g' b'>2 <c' f' a'>4}}
\subfloat[Fingered bass]{\lilypond[fragment, staffsize=20]{c'8 g' e' b' g' b' c' a'}}
\subfloat[Walking bass]{\lilypond[fragment, staffsize=20]{c'8 d' e' f' e' d' c' d'}}
\caption{Interpretation of bass}
\end{figure}

\The melody line is fundamentally a line made of \the highest tones of harmony flow --- \the soprano voice. Again, it doesn't have to be in a strict way. An analogue of \the walking bass was experimented with, but results weren't too pleasing, so just soprano is used --- this is something to be extended. Another melody line is a random melody line made of single random tones of harmony flow, it's led \the strict way as well.

\begin{figure}[h!]
\centering
\subfloat[Harmony flow]{\lilypond[fragment, staffsize=20]{<c' e' g'>4 <e' g' b'>2 <c' f' a'>4}}
\subfloat[Soprano melody]{\lilypond[fragment, staffsize=20]{g'4 b'2 a'4}}
\subfloat[Random melody]{\lilypond[fragment, staffsize=20]{e'4 b'2 f'4}}
\caption{Interpretation of melody}
\end{figure}

\The rhythmic line which is to boost \the feeling of a rhythm of a song is made of chords of harmony flow arranged to meet song's rhythm (but allowed being faster). Chords can be split when repeated, for example \the lowest tone \the first time of \the repeating, then \the rest tones, or by a principle of \the broken chord 1--5--10\footnote{Inspired by \cite{klavir}.} where \the first and \the third tone of a chord is alternating with \the second tone shifted up by an octave. Also percussions could be use to boost \the rhythm, but this is not treated in this thesis.

\begin{figure}[h!]
\centering
\subfloat[Harmony flow]{\lilypond[fragment, staffsize=20]{<c' e' g'>4 <e' g' b'>2 <c' f' a'>4}}
\subfloat[Rhythm chords]{\lilypond[fragment, staffsize=20]{c'8 <e' g'> e' <g' b'> <g' b'> <g' b'> c' <f' a'>}}
\subfloat[Broken chords 1--5--10]{\lilypond[fragment, staffsize=20]{<c' g'>8 e'' <e' b'> g'' <e' b'> g'' <c' a'> f''}}
\caption{Interpretation of rhythm part}
\end{figure}

Also \the very harmonic flow can be a line in \the interpretation, just for \the case of making \the total sound more dense or to boost \the harmony feeling.


\chapter{Implementation}
\label{implementation}

This chapter is a bridge between \the described algorithm and \the implementation itself --- named MusGen --- done in \the language \textsc{Haskell}\footnote{For \the reason for choosing Haskell see \url{http://i.imgur.com/hF6mS.jpg}.}. Mathematically straightforward and self-describing that Haskell source lines are, they can also be supplemented by a text in a natural language for an easier insight.

\section{Input}

\The generator program takes as input these parameters which \the generated song should fulfill:

\begin{itemize}
\item Key of harmony, given as tone's MIDI number.
\item Scale's intervals of harmony. There are two options: major and minor\footnote{Meant \the natural minor.}.
\item Beats per measure, given as an integer.
\item Tempo of \the song, given as a count of quarter notes per minute.
\item Minimal duration of \the song, given as a minimal count of measures.
\item Interpretation style of \the song. Possible options are: church, pop and rock.
\end{itemize}

User can also specify \the song's name and make \the program generate a new flow, otherwise an old one will be used if exists. Given a parameter \verb=-?= \the program prints help, as captured in Appendix \ref{exemplary-use}.


\section{Output}

\The program execution can be seen as having two phases where each produces output. \The first one's product is a file reflecting generated harmony flow. Its name is \the song's name appended by \the suffix \verb=.flow=. An example of \the file containing harmony flow of a short song is depicted in Figure \ref{example-flow}. \The second phase's product is a MIDI file containing a particular interpretation of harmony flow. \The first file can be reused in next run of program, resulting in a MIDI output with other interpretation.

There is also a script named \textsc{midi2pdf.sh} which given \the generated song's filename produces a PDF file containing sheet music based on \the input file, as depicted in Figure \ref{example-lily}.

\begin{figure}[h!]
\centering
\lstinputlisting[breaklines=true]{song.flow}
\caption{Example of saved harmony flow}
\label{example-flow}
\end{figure}

\begin{figure}[h!]
\centering
\lilypondfile{song.ly}
\caption{Example of generated song in sheet music}
\label{example-lily}
\end{figure}


\section{Environment}

\The generator program is written in \textsc{Haskell} using two extra packages for processing MIDI data and command line arguments, named \textsc{HCodecs}\footnote{\url{http://hackage.haskell.org/package/HCodecs}} and \textsc{CmdArgs}\footnote{\url{http://hackage.haskell.org/package/cmdargs}}. \The program can be run with \textsc{GHC}\footnote{\url{http://www.haskell.org/ghc/}}, \the packages can be installed with \textsc{Cabal}\footnote{\url{http://www.haskell.org/cabal/}}.

\The process of building source codes into a runnable binary can be initiated by calling program \textsc{make}\footnote{\url{http://www.gnu.org/software/make/}} with no arguments.

Script \textsc{midi2pdf.sh} is written in \textsc{BASH}\footnote{\url{http://www.gnu.org/software/bash/}} and uses \textsc{LilyPond}\footnote{\url{http://lilypond.org/}}.

See Appendix \ref{exemplary-use} for an exemplary use of \the program.

Diagrams used in this thesis are made using \textsc{SourceGraph}\footnote{\url{http://hackage.haskell.org/package/SourceGraph}}, which uses \textsc{Graphviz}\footnote{\url{http://www.graphviz.org/}}, and \textsc{svg2pdf}\footnote{\url{http://wiki.inkscape.org/wiki/index.php/Tools\#svg2pdf}}.


\section{Main program and helpers}

\The executive core of \the program is contained in \the file \textsc{Main.hs}. See Figure \ref{main-diag} for functions references and Figure \ref{imports-diag} for module imports. Root elements of \the file are:

\begin{description}
\item[Input] which is a data type determining command line arguments which specify requirements on an output song.
\item[use] which is data based on Input giving more information for arguments processing, including help descriptions.
\item[checkArg] which is a monad which given a (non evaluated) value and its name as a string tries to evaluate it and in case of error exits \the program printing an explanatory information, meant for checking right types of \the arguments.
\item[main] which is a monad executing this sequence:
	\begin{enumerate}
	\item Processing command line arguments. In case of demand of help or \the program's version, \the demanded is printed and \the program exits.
	\item Generating a new random generator.
	\item Checking processed arguments for being of right types.
	\item In case a harmony flow file doesn't exist or generating of a new one is demanded, a new harmony flow is generated and saved into \the file. Otherwise it's loaded from \the file.
	\item A MIDI file with an interpreted harmony flow is generated.
	\end{enumerate}
\end{description}

\begin{figure}[t!]
\includegraphics[scale=0.5]{Main.pdf}
\caption{Functions references for \the file Main.hs.}
\label{main-diag}
\end{figure}

\begin{figure}[t!]
\includegraphics[scale=0.5]{imports.pdf}
\caption{Module imports.}
\label{imports-diag}
\end{figure}

\subsection{Types}

Haskell comes with a set of basic types which aren't of much difference to types of other typed programming languages, see \cite{types-hask}. New types can be defined from existing ones or compounded, which is used in \the program for \the sake of better readability. New types and some functions of them are defined in \the file \textsc{Types.hs} like this:

\begin{description}
\item[Tone] is a type meant as a MIDI\footnote{More about MIDI at \ref{midi}.} tone, defined as an integer.
\item[Interval] is a type meant as an interval between two tones, defined as an integer.
\item[Intervals] is a type meant as a list of intervals --- mainly for representing scale intervals and chord intervals, allowing \the program to work with any scale or any chord user would define.
\item[Volume] is a type meant as a MIDI volume, defined as an integer.
\item[Duration] is a type meant as a duration of a tone or a chord, defined as an integer.
\item[Chord] is a data type meant as a chord description, compounded of \the following data parts:
	\begin{description}
	\item[tones] of \the chord,
	\item[key] of \the scale to which \the chord relates,
	\item[intervals] of \the scale to which \the chord relates,
	\item[begin] which is a duration since \the beginning of \the measure,
	\item[dur] which is a duration of \the chord,
	\item[measure] which is a duration of \the whole measure and
	\item[beats] meant as a count of beats per measure.
	\end{description}
	
	Thus, all \the chords contain \the information about \the used scale although this thesis works with a constant scale in \the song, but it's a framework allowing to easily extend \the concept with switching scales.
	
	For a better understanding of \the Chord type, Figure \ref{chord-illustration} is introduced. Its chords are of these values:
	\begin{enumerate}
	\item tones = ``C, E, G'' (acutally 60, 64 and 67 in MIDI), key = ``C'' (actually 60 in MIDI), intervals = ``major scale`` (actually 0, 2, 4, 5, 7, 9, 11 in semitone distances), begin = 0, dur = 2, measure = 8, beats = 2 (meaning \the upper number in \the figure)
	\item differing values: tones = ``E, G, B'', begin = 2, dur = 4
	\item differing values: tones = ``C, F, A'', begin = 6, dur = 2
	\end{enumerate}
	
	This means a beat is of \the duration of measure divided by beats. \The smallest value is 1 so depending on \the two values we determine \the fastest sound we can produce.
	
	\begin{figure}[h!]
	\centering
	\lilypond[fragment, staffsize=20]{\time 2/4 <c' e' g'>8 <e' g' b'>4 <c' f' a'>8}
	\caption{Chord type help illustration}
	\label{chord-illustration}
	\end{figure}
\item[remain] is a function of a chord, defining a duration which \the chord is missing to complete \the measure. 
\item[showBrief] is a function of a chord, defining a string which captures \the chord's information in a brief printable format.
\item[Flow] is a type meant as a list of chords.
\item[ChanceType] is a type meant as a function mapping a chord and a flow into a float.
\item[MidiEvent] is a type meant as a MIDI event, defined as a pair of MIDI ticks and a MIDI message.
\item[MidiTrack] is a type meant as a MIDI track, defined as a list of MIDI events.
\item[TracksDefs] is a type meant as a list of definitions of how to create and set MIDI tracks.
\item[RndGen] is a type meant as a reference to \the used random generator\footnote{More about random values generating at \ref{mgrandom}.}, StdGen is used.
\item[floatMin] is a function defining \the minimal suitable float value used in chance functions\footnote{See Subsections \ref{chanceHarmony} and \ref{chanceHarmonyRhythm}.}, \the value 0.1 is used.
\item[floatZero] is a function defining \the ``zero'' float value used in chance functions, \the value 0.001 is used.
\item[floatHalf] is a function defining \the ``half'' float value used in chance functions, \the value $0.5 + floatMin$ is used.
\end{description}

\subsection{Random generator}
\label{mgrandom}

For \the sake of randomization we'll utilize a set of frequently used randomization functions which are \the content of \the file \textsc{MGRandom.hs}. They use Haskell package \textsc{System.Random}\footnote{\url{http://hackage.haskell.org/packages/archive/random/1.0.0.2/doc/html/System-Random.html}} and its class \textsc{StdGen}, taking its random numbers as input for generating values more desirable like a duration or a chord's tones.

When working with random numbers in Haskell, there can be chosen one of two main ways:

\begin{itemize}
\item Getting random numbers from monads, but that leads to forcing functions using those numbers and all functions above\footnote{In a definition chain.} to be monads too, which deforms a functional approach a bit.
\item Getting random numbers from functions whose one argument must be a random generator. This approach, used in \the program, is pure functional but every used random generator needs to be unique, otherwise functions will return always \the same results because of \the definition of a function as unambiguous. But this is no problem --- functions above can split their input random generators and then pass new and unique ones.
\end{itemize}

For more information about randomness in Haskell see \cite{rnd-hask}.

\begin{description}
\item[rndDuration] is a function of a random generator, defining a duration randomly picked from even numbers from 2 to 16.
\item[rndTonesCount] is a function of a random generator, defining an integer meant as a count of tones. For simplifying things, \the result is always 4.
\item[rndIntervals] is a function of a random generator, defining an infinite list of (musical) intervals where each is a product of a random sign and an unsigned interval which is picked like this:\\
	\begin{tabular}{|l|l|}
	\hline
	\textbf{Probability} & \textbf{Interval} \\ \hline
	25\% & 0 \\ \hline
	15\% & 4 \\ \hline
	15\% & 3 \\ \hline
	10\% & 2 \\ \hline
	10\% & 5 \\ \hline
	10\% & 6 \\ \hline
	5\% & 1 \\ \hline
	5\% & 7 \\ \hline
	5\% & randomly picked from 0 to 12 \\
	\hline
	\end{tabular}
\item[rndNormal] is a function of an integer meaning an minimum, an integer meaning an maximum and a random generator, defining an integer randomly picked from \the normal distribution\footnote{Precisely said not \the normal distribution, but a slightly modified similar one --- \the Irwin–Hall distribution which is easy to implement: wanting a random number from $0$ to $max$, we sum $max$ random values from \the interval $<0, 1>$, see \cite{normal-wiki}.} of \the range.
\item[rndTones] is a function of a random generator, defining an infinite list of random tones generated with \the use of rndNormal for \the possible MIDI tones from 0 to 127.
\item[rndChordTones] is a function of a random generator, defining a sorted list of tones meant as a chord. It is using rndTonesCount and rndIntervals. \The tones are trying to reach \the number of rndTonesCount and are made sequentially by adding \the corresponding value of rndIntervals to \the preceding tone, starting with \the MIDI center value 64 plus \the first interval. This process is meant to ensure chords are balanced to \the center, not exaggerating.
\item[rndSplitL] is a function of a random generator, defining an infinite list of random generators made by splitting \the input one.
\item[testRndNormal] is a testing monad which generates 10000 tones using rndTones and prints counts of occurrences of possible tone values to verify normality of \the used randomization.
\end{description}

See Figure \ref{mgrandom-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{MGRandom.pdf}
\caption{Functions references for \the file MGRandom.hs.}
\label{mgrandom-diag}
\end{figure}


\clearpage
\section{Harmony flow}

A product of \the first stage is a harmony flow. Its creation and file handling is taken care of by monads and functions from \the file \textsc{Flow.hs}:

\begin{description}
\item[loadFlow] is a monad which given a filename reads a content of \the file and returns a harmony flow contained in \the content.
\item[produceFlow] is a monad which given a chord meant as a determination of flow's scale, an integer meant as flow's minimal required measure count and a filename produces a new harmony flow based on \the input parameters using a new random generator. \The flow is briefly printed, saved in \the file and also returned.
\item[nextFlow] is a function of a past harmony flow, an integer meaning a measures count, an integer meaning a minimal required measures count and a random generator, defining a harmony flow which is a sequel of \the input flow.
\item[nextTonesChord] is a function of a past harmony flow and a random generator, defining a chord harmonically following \the input flow, having a zero duration. Until a suitable chord is found, new ones are created invoking rndChordTones and rated by harmonyChance --- \the quality of \the suitable chord must beat a minimal required quality which is a random float between 0.5 and 0.7.
\item[nextDurChord] is a function of a chord, a past harmony flow and a random generator, defining a chord harmonically equivalent with \the input chord, having a duration suitable for a sequel of \the input flow. Until a suitable duration is found, new ones are created invoking rndDuration and rated by harmonyRhythmChance --- \the quality of \the suitable duration must beat a minimal required quality which is 0.5.
\item[canBeEnd] is a function of a chord and a past harmony flow, defining a boolean value whether \the chord can end \the flow. Harmonic rule checking function isTonicTriadIn is used to determine \the possibility of ending, \the chord also can't be shorter in duration than half \the measure duration.
\item[realPast] is a helper function of a harmony flow, defining a harmony flow which is equivalent to \the input flow if it's a regular flow, otherwise to an empty flow (that's in \the case \the input flow starts with an empty chord, meaning it's a helper flow determining \the flow's scale and beat).
\end{description}

See Figure \ref{flow-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{Flow.pdf}
\caption{Functions references for \the file Flow.hs.}
\label{flow-diag}
\end{figure}

\subsection{Relations}

Functions evaluating musical relations are located in \the file \textsc{Relations.hs}.

\begin{description}
\item[scaleSize] is a function defining \the size of octave in semitones, \the value is 12.
\item[major] is a function defining intervals of major scale in a relation to key tone.
\item[minor] is a function defining intervals of minor scale in a relation to key tone.
\item[chordIntervals] is a function defining a list of intervals that a chord can be made of. They are \the following:
	\begin{description}
	\item[majorTriad] which is a list of intervals making a major triad,
	\item[minorTriad] which is a list of intervals making a minor triad,
	\item[diminishedTriad] which is a list of intervals making a diminished triad and
	\item[augmentedTriad] which is a list of intervals making a augmented triad.
	\end{description}
\item[toneJumpFrom] is a function of a list of tones and a tone, defining a minimal interval between \the tone and \the tones from \the list.
\item[intervalFromTo] is a function of two tones, defining an interval between them in a range from 0 to $scaleSize - 1$, ignoring octaves.
\item[intervalAt] is a function of intervals and an integer, defining an interval at \the position of \the integer from \the intervals, cycling in values. 
\item[succToneIn] is a function of a tone meant as a scale's key, \the scale's intervals and a tone, defining a tone succeeding \the input tone in \the scale.
\item[predToneIn] is a function of a tone meant as a scale's key, \the scale's intervals and a tone, defining a tone preceding \the input tone in \the scale.
\item[isFromScale] is a function of a tone meant as a scale's key, \the scale's intervals and a tone, defining a truth value whether \the tone comes from \the scale.
\item[areFromScale] is a function of a tone meant as a scale's key, \the scale's intervals and a list of tones, defining a truth value whether \the tones come from \the scale.
\item[fitsIntervalsFrom] is a function of intervals, a tone meant as a chord's root and a list of \the chord's tones, defining a truth value whether \the chord is of \the intervals.
\item[fitsIntervals] is a function of intervals and a list of a chord's tones, defining a truth value whether \the chord is of \the intervals, by checking all \the possible chord's roots.
\item[hasRoot] is a function of a tone meant as a chord's root and a list of \the chord's tones, defining a truth value whether \the chord is of some intervals defined by \the function chordIntervals.
\item[isTriad] is a function of a list of a chord's tones, defining a truth value whether \the chord is a triad.
\item[isFullTriad] is a function of a list of a chord's tones, defining a truth value whether \the chord is a triad with no tones omitted.
\item[isTonicTriadIn] is a function of a tone meant as a scale's key, \the scale's intervals and a list of a chord's tones, defining a truth value whether \the chord is a tonic triad within \the scale.
\item[isSubdominantIn] is a function of a tone meant as a scale's key, \the scale's intervals and a list of a chord's tones, defining a truth value whether \the chord is a subdominant within \the scale.
\item[isDominantIn] is a function of a tone meant as a scale's key, \the scale's intervals and a list of a chord's tones, defining a truth value whether \the chord is a dominant within \the scale.
\item[isLeadingToneIn] is a function of a tone meant as a scale's key, \the scale's intervals and a tone, defining a truth value whether \the tone is \the leading-tone of \the scale.
\item[isLeadingToneOkIn] is a function of a tone meant as a scale's key, \the scale's intervals, a list of \the first chord's tones and a list of \the second chord's tones, defining a truth value whether, within \the scale, \the first chord's possible leading-tone is resolved or continued correctly into \the second chord, plus there is no more than one leading-tone at a time.
\item[isCounterpoint] is a function of a list of \the first chord's tones and a list of \the second chord's tones, defining a truth value whether \the chords progress in counterpoint.
\item[isSopranoMoving] is a function of a list of \the first chord's tones and a list of \the second chord's tones, defining a truth value whether \the soprano part of \the chords moves.
\item[isBassMoving] is a function of a list of \the first chord's tones and a list of \the second chord's tones, defining a truth value whether \the bass part of \the chords moves.
\item[percentageMoving] is a function of a list of \the first chord's tones and a list of \the second chord's tones, defining a float meant as a percentage of \the second chord's tones not being part of \the first one.
\item[isConsonantIn] is a function of a tone meant as a scale's key, \the scale's intervals and a list of tones, defining a truth value whether \the tones are consonant within \the scale.
\end{description}

See Figure \ref{relations-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{Relations.pdf}
\caption{Functions references for \the file Relations.hs.}
\label{relations-diag}
\end{figure}

\subsection{Chances for harmony}
\label{chanceHarmony}

Deciding whether a chord can be an appropriate successor to past chords harmonically is is done using functions from \the file \textsc{ChanceHarmony.hs}.

\begin{description}
\item[harmonyChance] is a function of a possible successor chord and past chords ordered backwards, defining a float value --- reflecting how \the chord fits \the past harmonically --- as a product of elementary deciding functions, each powered by its significance, as defined by \the list \textbf{chances}, each function having \the same type signature with \the expected range of \the float being from 0 meaning not fulfilling at all to 1 meaning totally fulfilling:
\item[chanceThick] defines whether \the chord is thick --- as not of a big distance between bass and soprano --- and not too far from \the key.
\item[chanceJumps] defines whether there's not too much ``jumping'' from \the last past chord --- meant as too big moves in voices.
\item[chanceInScale] defines whether \the chord comes from \the scale.
\item[chanceTriad] defines whether \the chord is of a triad nature.
\item[chanceTonicStart] defines whether \the chord is a tonic triad and thus can begin a song.
\item[chanceNotDomThenSub] defines whether \the last past chord isn't dominant and at \the same time \the actual chord isn't subdominant, which would be an illegal move.
\item[chanceLeadingTone] defines whether \the rule of leading tone isn't broken.
\item[chanceNotEmpty] defines whether \the chord isn't empty (just a pause).
\item[chance4Tones] defines whether \the chord has 4 unique tones (octaves differ).
\item[chanceCounterpoint] defines whether bass and soprano are moving in a counterpoint manner.
\item[chanceMove] defines how much voices are moving, \the most important are moves in bass and soprano.
\item[chanceConsonance] defines whether \the progress is of a consonant nature by beginning a flow with a consonant chord and not ensuing a dissonant one by another dissonant.
\item[chanceAntiRepetition] defines whether \the chord isn't a repetition of one of \the last three chords.
\item[chanceAntiRepetitionForSoprano] defines whether \the soprano doesn't repeat one of \the last three tones.
\end{description}

See Figure \ref{chanceHarmony-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{ChanceHarmony.pdf}
\caption{Functions references for \the file ChanceHarmony.hs.}
\label{chanceHarmony-diag}
\end{figure}

\subsection{Chances for rhythm}
\label{chanceHarmonyRhythm}

Deciding whether a chord can be an appropriate successor to past chords rhythmically is is done using functions from \the file \textsc{ChanceHarmonyRhythm.hs}.

\begin{description}
\item[harmonyRhythmChance] is a function of a possible successor chord and past chords ordered backwards, defining a float value --- reflecting how \the chord fits \the past rhythmically --- as a product of elementary deciding functions, each powered by its significance, as defined by \the list \textbf{chances}, each function having \the same type signature with \the expected range of \the float being from 0 meaning not fulfilling at all to 1 meaning totally fulfilling:
\item[chanceMeasureTime] defines whether \the chord ends before or just at ending of measure, meant to prevent overlapping measures.
\item[chanceBeatTime] defines whether \the chord ends at beat or copies a rhythmical pattern used in \the last measure, which is defined by \the function \textbf{chanceCopyRhythm}.
\end{description}

See Figure \ref{chanceHarmonyRhythm-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{ChanceHarmonyRhythm.pdf}
\caption{Functions references for \the file ChanceHarmonyRhythm.hs.}
\label{chanceHarmonyRhythm-diag}
\end{figure}


\clearpage
\section{Interpretation}

\The core of \the second phase of \the program --- interpretation --- is located in \the file \textsc{Interpretation.hs}.

\The list \textbf{interpretations} is a list of all possible interpretation styles, including:
\begin{description}
\item[churchTracks] interpreting flow by 5 instruments (organ, piano, acoustic bass, acoustic steel guitar and harpsichord) in a church music resembling style,
\item[popTracks] interpreting flow by 5 instruments (synthetic strings, square lead, synthetic bass, acoustic steel guitar and sawtooth lead) in a pop music resembling style and
\item[rockTracks] interpreting flow by 5 instruments (distorted guitar, overdriven guitar twice, electric bass and harpsichord) in a rock music resembling style.
\end{description}

Following functions are functions of a harmony flow and a random generator, defining a harmony flow interpreting \the input flow in a particular way:

\begin{description}
\item[harmonyTrack] defines \the same flow, copying \the harmony.
\item[sopranoTrack] defines a soprano melody flow.
\item[harmonyRhythmTrack] defines a rhythmical chords flow.
\item[harmonyRhythmTrackRock] defines a rhythmical chords flow, transposed one octave down.
\item[additionTrack] defines a random melody flow.
\item[bassTrack] defines a bass melody flow, randomly switching fingered bass or walking bass styles.
\end{description}

See Figure \ref{interpretation-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{Interpretation.pdf}
\caption{Functions references for \the file Interpretation.hs.}
\label{interpretation-diag}
\end{figure}

\subsection{Techniques used in interpretation}

\The interpretation techniques are implemented by functions contained in \the file \textsc{InterpretationTechniques.hs}.

There's an auxiliary function named \textbf{octaveShift} which is a function of an integer and a musical flow, defining a flow made of \the input flow transposed by \the integer count of octaves.

Other functions are standardized to \the form of a function of an random generator and a musical flow, defining a musical flow. Sometimes \the random generator can be unused if not needed. These are \the functions and how they define \the output flow:

\begin{description}
\item[sopranoFlow] defines \the flow made of \the soprano part\footnote{\The highest tones.} of \the input flow.
\item[randomMelodyFlow] defines \the flow made of \the input flow where just one tone is randomly picked from each chord.
\item[fingeredFlow] defines \the flow made of \the input flow where each chord is arranged to a sequence of its tones in \the form: \the first, \the third, \the second, \the third, \the second, \ldots, \the sequence meeting \the beat of \the flow.
\item[chordRhythmFlow] defines \the flow made of \the input flow where each chord is repeated to meet \the beat of \the flow.
\item[brokenChord1\_5\_10] defines \the flow made of \the input flow where each chord is repeated in alternating forms, the first form being \the first and \the third tone of \the chord, \the second form being \the second tone transposed up by an octave; \the repetition meeting \the beat of \the flow.
\item[walkingBass] defines \the flow made of \the input flow where each chord is arranged to a sequence of tones with \the first tone being \the first tone of \the chord, others going up and down in \the scale of \the flow to approach \the first tone of \the succeeding chord or \the first tone of \the actual chord if it's \the last one; \the sequence meeting \the beat of \the flow but twice \the speed.
\end{description}

See Figure \ref{interpretationTechniques-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{InterpretationTechniques.pdf}
\caption{Functions references for \the file InterpretationTechniques.hs.}
\label{interpretationTechniques-diag}
\end{figure}


\clearpage
\section{MIDI}
\label{midi}

According to \cite{midi-wiki}, MIDI, standing for Musical Instrument Digital Interface, is a protocol of communication enabling different electronic musical instruments and computers to interchange digital messages about music being played. Moreover, there's a MIDI file format which allows us to save these data. Having \the well-defined file format we can operate with it in many ways, we'll use it as a final stage of our generated songs. Then we'll be able to play it, make sheet music of it and there's also a possibility of generated songs being just \the first step in a chain of creation of music.

We'll use a MIDI file format which is composed of MIDI tracks where each represents a specific interpretation of harmony flow for a specific instrument. A track is a list of MIDI events where each is defined by a delay since \the preceding event and a MIDI message.

\subsection{MIDI messages}

Let's have a look at some basic MIDI messages --- as defined in \the Haskell package \textsc{HCodecs}, see \cite{midi-hcodecs} --- \the generator program uses:

\begin{description}
\item[NoteOn] tells what tone on what channel should be played with what volume, zero volume means muting \the tone.
\item[KeySignature] tells how many sharps or flats a musical staff has and whether it's a major scale.
\item[TimeSignature] tells two numbers which are written at \the beginning of a musical staff, indicating a time signature.
\item[ChannelPrefix] tells what channel is meant by following messages.
\item[InstrumentName] tells a name of an instrument, just informational message.
\item[ProgramChange] tells what channel has what MIDI instrument.
\item[TempoChange] tells a new tempo in an uncommon format of \the value of microseconds per minute divided by beats per minute, see \cite{midi-tempo}.
\item[TrackEnd] tells a MIDI track ends, all tracks should end with this message.
\end{description}

\subsection{Implemented functions and monad in relation to MIDI output}

These are \the functions and \the monad contained in \the file \textsc{Midi.hs}:

\begin{description}
\item[toneMidi] is a function of a tone and a volume, defining a MIDI event that starts playing \the tone with \the volume.
\item[pauseMidi] is a function of a duration, defining a MIDI event that moves \the MIDI play forward by \the duration.
\item[flow2Midi] is a function of a musical flow, defining a list of MIDI events playing this flow. Note that each part of flow is in fact an isolated chord, so there's no way to create pervading tones in one flow. Another note: volume set for \the events is constant, set to \the MIDI maximum 127.
\item[keySignature] is a function of a tone and a list of intervals, defining a message part of a MIDI event that represents a MIDI key signature of a scale made of \the tone as \the key and \the intervals.
\item[timeSignature] is a function of an integer, defining a MIDI event that sets \the time signature with \the integer as \the upper number, \the lower number is 4.
\item[eventsParam] is a function of a channel number, a float and a list of MIDI events, defining an altered list where every tone playing event is set to be played on \the given channel with volume being multiplied by \the float.
\item[midiTrack] is a function of a channel number, an instrument name, an instrument MIDI number, a volume, a list of MIDI events, a beginning chord stating \the scale of a track, and a tempo, defining a list of MIDI events fully covering \the track made of \the input list and adjusted to \the rest of arguments.
\item[makeTracks] is a function of a list of definitions of MIDI tracks, a musical flow, a random generator and a tempo, defining a list of MIDI tracks where each is created by an interpretation of \the flow as defined for \the track with \the use of a new random generator split from \the input one, processed by \the function midiTrack to meet \the other arguments.
\item[midiFile] is a function of a list of MIDI tracks, defining a content of a MIDI file made of \the tracks.
\item[exportMidi] is a monad which given a filename and a content of a MIDI file exports \the content into a file with \the name.
\end{description}

See Figure \ref{midi-diag} for functions references.

\begin{figure}[t!]
\includegraphics[scale=0.5]{Midi.pdf}
\caption{Functions references for \the file Midi.hs.}
\label{midi-diag}
\end{figure}


\chapter{Comparison with similar software}
\label{comparison}

MusGen is not \the only software targeting computer music creation --- according to \cite{algorithms} a lot of similar software exists and a lot of papers has been published. Let's take a look at some programs generating music in a relation to MusGen.

\section{WolframTones}

WolframTones\footnote{Homepage \url{http://tones.wolfram.com/}.} comes with an algorithm which, according to \cite{wolfram}, works this way:

\begin{itemize}
\item There's a 2D matrix.
\item Color (just black or white) of every cell in \the matrix is defined in a relation to neighbour cells.
\item A strip from \the matrix is taken.
\item One dimension from \the strip is considered as a pitch, \the other one as a time.
\item Black cells from \the strip are instrumentalized based on their position. Multiple instruments are supported, thus a melody or bass line can exist and \the piece can be supplemented by percussion.
\end{itemize}

Compared to Musgen, it's more deterministic --- just \the rule of coloring is optional and bringing a space of possibilities --- and it doesn't obey classical music rules, actually it produces output which is to be musical naturally but maybe not so much in a Western way.

\section{FractMus}

FractMus\footnote{Homepage \url{http://www.gustavodiazjerez.com/fractmus_overview.html}.} is another program using mathematical formulas to create a song. Described as just a helping tool in \the process of creation of music, it can be seen as an example of \the group of programs which not tend to compose \the final piece but just help \the user use algorithms and computation in \the process.

MusGen can be seen in this way as well --- generated songs being in \the MIDI format can be changed, taken as a basis for more elaborated songs.

\section{C.P.U. Bach}

C.P.U. Bach\footnote{No homepage, also works only on an uncommon platform called 3DO.} has, according to \cite{cpubach}, a lot of similarity with MusGen: it uses a so called ``weighted exhaustive search'' which seems to obey rules what can or cannot be produced, but it encompasses more things like ``tendencies'' --- not so strict rules --- and it also tries to create a song from parts which gives more musical sense. Actually, being more enhanced, MusGen would probably be very close to this.

\section{Virtual music composer}

Virtual music composer\footnote{Homepage \url{http://www.virtualmusiccomposer.com/}.} is an example of programs which are similar in input and output to MusGen but there's no insight into their algorithms because they're not free software and there's no description of their principles released.

Virtual music composer takes few input parameters determining output's scale and style and just creates MIDI, like MusGen.


\chapter{Conclusion}

After introducing necessary music theory terms in a brief way, \the core of \the thesis --- \the algorithm --- was presented. Its development came from self-experimenting with both practical (MIDI) and theoretical (harmony theory, mainly taught by \the great book \cite{kofron}) stuff. Its principle is very easy and lightweight, thus not tending to create a complex masterpieces but mainly showing \the possibility of creating a framework which can give algorithmic music and can be extended by more, especially harmonic, rules to get closer to classical Western music.

\The implementation done in language Haskell proves \the functionality of \the algorithm and also describes it including used rules in a mathematical bright way, not seeing Haskell so much as a programming language but more as a definition language.

\The comparison with similar software shows there's more people wanting to create and improve programs generating random music which leads to propositions of \the next development: letting extending a count of harmony rules aside, melody and rhythm are two things where only cornerstones were put and thus can be developed almost any way. Also a too much of randomness may be more than sufferable making output too much chaotic --- if \the random seed repeats sometimes, we could be able to produce more accustomed songs with choruses and verses. Then, a lot of people would surely appreciate a possibility of engaging a percussion stuff.

Making MusGen was quite a fun and I'm looking forward to extend it and maybe cooperate with other people interested in music and computers.


\cleardoublepage
\phantomsection
\addcontentsline{toc}{chapter}{Bibliography}
\begin{thebibliography}{99}

\bibitem{kofron}
\iffrench KOFRON, Jaroslav. \emph{Ucebnice harmonie}.
\else KOFROŇ, Jaroslav. \emph{Učebnice harmonie}.
\fi
10th edition, 2006. 178 pages. ISBN 80-86385-14-0.

\bibitem{klavir}
\iffrench KALENDA, Václav. \emph{Na klavír za nekolik tydnu}
\else KALENDA, Václav. \emph{Na klavír za několik týdnů}
\fi
[online]. [cited 27th April 2011]. $<$\url{http://hobby.idnes.cz/skola-hry-na-klavir-0o1-/hobby-domov.asp?o=0&klic=145025}$>$.

\bibitem{types-hask} Types and Typeclasses. \emph{Learn You a Haskell for Great Good!} [online]. [cited 25th March 2011]. $<$\url{http://learnyouahaskell.com/types-and-typeclasses}$>$.

\bibitem{rnd-hask} Randomness. \emph{Learn You a Haskell for Great Good!} [online]. [cited 24th March 2011]. $<$\url{http://learnyouahaskell.com/input-and-output\#randomness}$>$.

\bibitem{normal-wiki} Normal distribution --- Generating values from normal distribution. \emph{Wikipedia, the free encyclopedia} [online]. [cited 22nd March 2011]. $<$\url{http://en.wikipedia.org/wiki/Normal_distribution\#Generating_values_from_normal_distribution}$>$.

\bibitem{midi-wiki} Musical Instrument Digital Interface. \emph{Wikipedia, the free encyclopedia} [online]. [cited 18th March 2011]. $<$\url{http://en.wikipedia.org/wiki/Musical_Instrument_Digital_Interface}$>$.

\bibitem{midi-hcodecs} Codec.Midi. \emph{HackageDB} [online]. [cited 18th March 2011]. $<$\url{http://hackage.haskell.org/packages/archive/HCodecs/0.2/doc/html/Codec-Midi.html}$>$.

\bibitem{midi-tempo} MIDI File Format. \emph{\The Sonic Spot} [online]. [cited 18th March 2011]. $<$\url{http://www.sonicspot.com/guide/midifiles.html}$>$.

\bibitem{algorithms} Algorithmic composition resources. \emph{Algorithmic.net} [online]. [cited 29th April 2011]. $<$\url{http://www.flexatone.net/algoNet/}$>$.

\bibitem{wolfram} How WolframTones Works. \emph{WolframTones} [online]. [cited 29th April 2011]. $<$\url{http://tones.wolfram.com/about/how.html}$>$.

\bibitem{cpubach} MEIER, Sidney K. --- et al.  System for real-time music composition and synthesis. \emph{Google patents} [online]. [cited 29th April 2011]. $<$\url{http://www.google.com/patents?vid=USPAT5496962}$>$.

\end{thebibliography}


\appendix

\chapter{Exemplary use of \the program}
\label{exemplary-use}

\begin{enumerate}

\item Installing needed packages:
\begin{verbatim}
$ cabal install hcodecs cmdargs
\end{verbatim}

\item Compiling \the program:
\begin{verbatim}
$ make
mkdir tmp
ghc --make Main -outputdir tmp -o musgen -O2
[ 1 of 11] Compiling Var              ( Var.hs, tmp/Var.o )
[ 2 of 11] Compiling Types            ( Types.hs, tmp/Types.o )
[ 3 of 11] Compiling ChanceHarmonyRhythm ( ChanceHarmonyRhythm.hs, tmp/ChanceHar
monyRhythm.o )
[ 4 of 11] Compiling Relations        ( Relations.hs, tmp/Relations.o )
[ 5 of 11] Compiling ChanceHarmony    ( ChanceHarmony.hs, tmp/ChanceHarmony.o )
[ 6 of 11] Compiling MGRandom         ( MGRandom.hs, tmp/MGRandom.o )
[ 7 of 11] Compiling InterpretationTechniques ( InterpretationTechniques.hs, tmp
/InterpretationTechniques.o )
[ 8 of 11] Compiling Midi             ( Midi.hs, tmp/Midi.o )
[ 9 of 11] Compiling Interpretation   ( Interpretation.hs, tmp/Interpretation.o 
)
[10 of 11] Compiling Flow             ( Flow.hs, tmp/Flow.o )
[11 of 11] Compiling Main             ( Main.hs, tmp/Main.o )
Linking musgen ...
\end{verbatim}

\item Asking for help:
\begin{verbatim}
$ ./musgen -?
MusGen, version date: 2011-03-16

musgen [OPTIONS] [SONG_NAME]

Common flags:
  -k --key[=MIDI_TONE]         Key of harmony
  -s --scale[=major|minor]     Scale of harmony
  -b --beats[=INT]             Beats per measure
  -t --tempo[=INT]             Quarter notes per minute
  -m --minmeasures[=INT]       Minimal number of measures
  -i --interpretation[=STYLE]  Style of interpretation
  -n --new                     Generate new flow
  -? --help                    Display help message
  -V --version                 Print version information

Generates a song fulfilling given parameters, song's name is "song" by default.
Available styles of interpretation are: church, pop, rock.
Output is SONG_NAME.midi with playable MIDI data and SONG_NAME.flow with
reusable information about harmony flow.
\end{verbatim}

\item Generating a song:
\begin{verbatim}
$ ./musgen -k62 -smajor -b3 -t130 -m4 -ipop
([54,57,62,69],b0,d4,r12)
([57,61,64],b4,d6,r8)
([57,61,66],b10,d2,r2)
([55,59,62,67],b0,d2,r12)
([54,57,62,69],b2,d10,r10)
([59,62,66],b0,d2,r12)
([57,61,64,69],b2,d2,r10)
([61,64,67],b4,d2,r8)
([57,62,66,69],b6,d4,r6)
([61,64,67],b10,d2,r2)
([59,62,66,71],b0,d2,r12)
([61,66,69],b2,d2,r10)
([59,62,67,71],b4,d8,r8)
([59,62,67],b0,d10,r12)
([57,61,66,69],b10,d2,r2)
([61,64,67],b0,d10,r12)
([57,61,64,69],b10,d2,r2)
([59,62,66],b0,d12,r12)
([55,61,64,67],b0,d6,r12)
([57,62,66],b6,d6,r6)
Flow generated.
MIDI generated.
\end{verbatim}

\item Generating a sheet music:
\begin{verbatim}
$ ./midi2pdf.sh song.midi
\end{verbatim}

\end{enumerate}


\end{document}

